{"uid":"d509a51aeba2c4b0","name":"User can download multiple templates dynamically","fullName":"excel_value.TestAddressSearch#test_multiple_file_download","historyId":"612864c302354de26d4966fd863e567b","time":{"start":1746646899260,"stop":1746646899412,"duration":152},"status":"failed","statusMessage":"Failed: Test failed: test_multiple_file_download - 'PATH' is not in list","statusTrace":"self = <excel_value.TestAddressSearch object at 0x000001D59D02F690>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can download multiple templates dynamically\")\n    def test_multiple_file_download(self, page):\n        try:\n            test_case_number = 6  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n>               address_data = read_address_data(test_case_number)\n\nexcel_value.py:294: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nexcel_value.py:38: in read_address_data\n    column_indices = [headers.index(column) for column in required_columns]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n.0 = <list_iterator object at 0x000001D59D403B50>\n\n>   column_indices = [headers.index(column) for column in required_columns]\nE   ValueError: 'PATH' is not in list\n\nexcel_value.py:38: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <excel_value.TestAddressSearch object at 0x000001D59D02F690>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can download multiple templates dynamically\")\n    def test_multiple_file_download(self, page):\n        try:\n            test_case_number = 6  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n    \n            with allure.step(\"Navigating to template download page\"):\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            download_path = \"C:\\\\Users\\\\bv9653\\\\my-automation-project\\\\tests\\\\downloads\"  # Specify your custom path\n    \n            with allure.step(\"Downloading the template multiple times\"):\n                for i in range(4):  # Loop for multiple downloads\n                    with page.expect_download() as download_info:\n                        page.get_by_test_id(\"templateLink\").click()\n    \n                    download = download_info.value\n                    file_name = f\"qq_import_template.xlsx\" if i == 0 else f\"qq_import_template ({i}).xlsx\"\n                    download.save_as(f\"{download_path}/{file_name}\")\n    \n                    print(f\"File saved to: {download_path}/{file_name}\")\n                    page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded  # Wait between downloads\n    \n            with allure.step(\"Validating downloads\"):\n                assert page.get_by_test_id(\"templateLink\").is_visible(), \"Download link is not visible\"\n    \n        except Exception as e:\n>           handle_error(page, \"test_multiple_file_download\", e)\n\nexcel_value.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://qq.att.com/landing'>, test_name = 'test_multiple_file_download'\nerror = ValueError(\"'PATH' is not in list\")\n\n    def handle_error(page, test_name, error):\n        \"\"\"Handles errors by taking a screenshot, attaching it to Allure, and marking the test as failed.\"\"\"\n        os.makedirs(\"screenshots\", exist_ok=True)  # Ensure the screenshots directory exists\n        screenshot_path = f\"screenshots/{test_name}_error.png\"\n        page.screenshot(path=screenshot_path)\n        allure.attach.file(\n            screenshot_path,\n            name=f\"{test_name} Error Screenshot\",\n            attachment_type=allure.attachment_type.PNG\n        )\n        print(f\"Error during {test_name}: {error}\")\n>       pytest.fail(f\"Test failed: {test_name} - {error}\")\nE       Failed: Test failed: test_multiple_file_download - 'PATH' is not in list\n\nexcel_value.py:60: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_verify_url","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"page","time":{"start":1746646754000,"stop":1746646755023,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"pytestconfig","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_url","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"Failed: Test failed: test_multiple_file_download - 'PATH' is not in list","statusTrace":"self = <excel_value.TestAddressSearch object at 0x000001D59D02F690>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can download multiple templates dynamically\")\n    def test_multiple_file_download(self, page):\n        try:\n            test_case_number = 6  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n>               address_data = read_address_data(test_case_number)\n\nexcel_value.py:294: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nexcel_value.py:38: in read_address_data\n    column_indices = [headers.index(column) for column in required_columns]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n.0 = <list_iterator object at 0x000001D59D403B50>\n\n>   column_indices = [headers.index(column) for column in required_columns]\nE   ValueError: 'PATH' is not in list\n\nexcel_value.py:38: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <excel_value.TestAddressSearch object at 0x000001D59D02F690>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can download multiple templates dynamically\")\n    def test_multiple_file_download(self, page):\n        try:\n            test_case_number = 6  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n    \n            with allure.step(\"Navigating to template download page\"):\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            download_path = \"C:\\\\Users\\\\bv9653\\\\my-automation-project\\\\tests\\\\downloads\"  # Specify your custom path\n    \n            with allure.step(\"Downloading the template multiple times\"):\n                for i in range(4):  # Loop for multiple downloads\n                    with page.expect_download() as download_info:\n                        page.get_by_test_id(\"templateLink\").click()\n    \n                    download = download_info.value\n                    file_name = f\"qq_import_template.xlsx\" if i == 0 else f\"qq_import_template ({i}).xlsx\"\n                    download.save_as(f\"{download_path}/{file_name}\")\n    \n                    print(f\"File saved to: {download_path}/{file_name}\")\n                    page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded  # Wait between downloads\n    \n            with allure.step(\"Validating downloads\"):\n                assert page.get_by_test_id(\"templateLink\").is_visible(), \"Download link is not visible\"\n    \n        except Exception as e:\n>           handle_error(page, \"test_multiple_file_download\", e)\n\nexcel_value.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://qq.att.com/landing'>, test_name = 'test_multiple_file_download'\nerror = ValueError(\"'PATH' is not in list\")\n\n    def handle_error(page, test_name, error):\n        \"\"\"Handles errors by taking a screenshot, attaching it to Allure, and marking the test as failed.\"\"\"\n        os.makedirs(\"screenshots\", exist_ok=True)  # Ensure the screenshots directory exists\n        screenshot_path = f\"screenshots/{test_name}_error.png\"\n        page.screenshot(path=screenshot_path)\n        allure.attach.file(\n            screenshot_path,\n            name=f\"{test_name} Error Screenshot\",\n            attachment_type=allure.attachment_type.PNG\n        )\n        print(f\"Error during {test_name}: {error}\")\n>       pytest.fail(f\"Test failed: {test_name} - {error}\")\nE       Failed: Test failed: test_multiple_file_download - 'PATH' is not in list\n\nexcel_value.py:60: Failed","steps":[{"name":"Fetching data for Test Case 6","time":{"start":1746646899260,"stop":1746646899260,"duration":0},"status":"broken","statusMessage":"ValueError: 'PATH' is not in list\n","statusTrace":"  File \"C:\\Users\\bv9653\\my-automation-project\\tests\\excel_value.py\", line 294, in test_multiple_file_download\n    address_data = read_address_data(test_case_number)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\bv9653\\my-automation-project\\tests\\excel_value.py\", line 38, in read_address_data\n    column_indices = [headers.index(column) for column in required_columns]\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\bv9653\\my-automation-project\\tests\\excel_value.py\", line 38, in <listcomp>\n    column_indices = [headers.index(column) for column in required_columns]\n                      ^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"7732b079554a8b8c","name":"test_multiple_file_download Error Screenshot","source":"7732b079554a8b8c.png","type":"image/png","size":36783},{"uid":"78eca91696ec7348","name":"stdout","source":"78eca91696ec7348.txt","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"page::0","time":{"start":1746647091571,"stop":1746647091813,"duration":242},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"suite","value":"Address Search Test Suite"},{"name":"tag","value":"flaky(reruns=1, reruns_delay=1)"},{"name":"subSuite","value":"TestAddressSearch"},{"name":"host","value":"INBLR2791"},{"name":"thread","value":"21632-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"excel_value"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["flaky(reruns=1, reruns_delay=1)"]},"source":"d509a51aeba2c4b0.json","parameterValues":[]}