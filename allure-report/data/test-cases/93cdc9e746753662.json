{"uid":"93cdc9e746753662","name":"User can export the request details","fullName":"excel_value.TestAddressDetails#test_file_export","historyId":"63343c1e8adecd9f6501318cf4301e1b","time":{"start":1746647010613,"stop":1746647010752,"duration":139},"status":"failed","statusMessage":"Failed: Test failed: test_exportfile_download - No column mapping found for test case 10.","statusTrace":"self = <excel_value.TestAddressDetails object at 0x000001D59D030B90>\npage = <Page url='https://qq.att.com/landing?singleAddressState=recent'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can export the request details\")\n    def test_file_export(self, page):\n        try:\n    \n            test_case_number = 10  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n>               address_data = read_address_data(test_case_number)\n\nexcel_value.py:437: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_case_number = 10\n\n    def read_address_data(test_case_number):\n        \"\"\"Reads specific column data for the given test case.\"\"\"\n        workbook = openpyxl.load_workbook(\"Testcases.xlsx\")  # Updated to use 'Testcases.xlsx'\n        sheet = workbook.active\n    \n        # Validate test case and retrieve required columns\n        required_columns = TEST_CASE_MAPPING.get(test_case_number)\n        if not required_columns:\n>           raise ValueError(f\"No column mapping found for test case {test_case_number}.\")\nE           ValueError: No column mapping found for test case 10.\n\nexcel_value.py:34: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <excel_value.TestAddressDetails object at 0x000001D59D030B90>\npage = <Page url='https://qq.att.com/landing?singleAddressState=recent'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can export the request details\")\n    def test_file_export(self, page):\n        try:\n    \n            test_case_number = 10  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n            download_paths = \"tests\\downloads\"\n    \n            with allure.step(\"Navigating to address page\"):\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            with allure.step(f\"User can export the list of recent activities\"):\n                page.get_by_test_id(\"activitiesButton\").click()\n                with page.expect_download() as download1_info:\n                    page.get_by_role(\"button\", name=\"export-icon Export\").click()\n                download1 = download1_info.value\n                download1.save_as(f\"{download_paths}/template2.xlsx\")\n                print(f\"File saved to: {download_paths}/template2.xlsx\")\n    \n            page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n        except Exception as e:\n>           handle_error(page, \"test_exportfile_download\", e)\n\nexcel_value.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://qq.att.com/landing?singleAddressState=recent'>, test_name = 'test_exportfile_download'\nerror = ValueError('No column mapping found for test case 10.')\n\n    def handle_error(page, test_name, error):\n        \"\"\"Handles errors by taking a screenshot, attaching it to Allure, and marking the test as failed.\"\"\"\n        os.makedirs(\"screenshots\", exist_ok=True)  # Ensure the screenshots directory exists\n        screenshot_path = f\"screenshots/{test_name}_error.png\"\n        page.screenshot(path=screenshot_path)\n        allure.attach.file(\n            screenshot_path,\n            name=f\"{test_name} Error Screenshot\",\n            attachment_type=allure.attachment_type.PNG\n        )\n        print(f\"Error during {test_name}: {error}\")\n>       pytest.fail(f\"Test failed: {test_name} - {error}\")\nE       Failed: Test failed: test_exportfile_download - No column mapping found for test case 10.\n\nexcel_value.py:60: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"page","time":{"start":1746646754000,"stop":1746646755023,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_verify_url","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"delete_output_dir","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"pytestconfig","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_url","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"Failed: Test failed: test_exportfile_download - No column mapping found for test case 10.","statusTrace":"self = <excel_value.TestAddressDetails object at 0x000001D59D030B90>\npage = <Page url='https://qq.att.com/landing?singleAddressState=recent'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can export the request details\")\n    def test_file_export(self, page):\n        try:\n    \n            test_case_number = 10  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n>               address_data = read_address_data(test_case_number)\n\nexcel_value.py:437: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_case_number = 10\n\n    def read_address_data(test_case_number):\n        \"\"\"Reads specific column data for the given test case.\"\"\"\n        workbook = openpyxl.load_workbook(\"Testcases.xlsx\")  # Updated to use 'Testcases.xlsx'\n        sheet = workbook.active\n    \n        # Validate test case and retrieve required columns\n        required_columns = TEST_CASE_MAPPING.get(test_case_number)\n        if not required_columns:\n>           raise ValueError(f\"No column mapping found for test case {test_case_number}.\")\nE           ValueError: No column mapping found for test case 10.\n\nexcel_value.py:34: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <excel_value.TestAddressDetails object at 0x000001D59D030B90>\npage = <Page url='https://qq.att.com/landing?singleAddressState=recent'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can export the request details\")\n    def test_file_export(self, page):\n        try:\n    \n            test_case_number = 10  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n            download_paths = \"tests\\downloads\"\n    \n            with allure.step(\"Navigating to address page\"):\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            with allure.step(f\"User can export the list of recent activities\"):\n                page.get_by_test_id(\"activitiesButton\").click()\n                with page.expect_download() as download1_info:\n                    page.get_by_role(\"button\", name=\"export-icon Export\").click()\n                download1 = download1_info.value\n                download1.save_as(f\"{download_paths}/template2.xlsx\")\n                print(f\"File saved to: {download_paths}/template2.xlsx\")\n    \n            page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n        except Exception as e:\n>           handle_error(page, \"test_exportfile_download\", e)\n\nexcel_value.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://qq.att.com/landing?singleAddressState=recent'>, test_name = 'test_exportfile_download'\nerror = ValueError('No column mapping found for test case 10.')\n\n    def handle_error(page, test_name, error):\n        \"\"\"Handles errors by taking a screenshot, attaching it to Allure, and marking the test as failed.\"\"\"\n        os.makedirs(\"screenshots\", exist_ok=True)  # Ensure the screenshots directory exists\n        screenshot_path = f\"screenshots/{test_name}_error.png\"\n        page.screenshot(path=screenshot_path)\n        allure.attach.file(\n            screenshot_path,\n            name=f\"{test_name} Error Screenshot\",\n            attachment_type=allure.attachment_type.PNG\n        )\n        print(f\"Error during {test_name}: {error}\")\n>       pytest.fail(f\"Test failed: {test_name} - {error}\")\nE       Failed: Test failed: test_exportfile_download - No column mapping found for test case 10.\n\nexcel_value.py:60: Failed","steps":[{"name":"Fetching data for Test Case 10","time":{"start":1746647010613,"stop":1746647010613,"duration":0},"status":"broken","statusMessage":"ValueError: No column mapping found for test case 10.\n","statusTrace":"  File \"C:\\Users\\bv9653\\my-automation-project\\tests\\excel_value.py\", line 437, in test_file_export\n    address_data = read_address_data(test_case_number)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\bv9653\\my-automation-project\\tests\\excel_value.py\", line 34, in read_address_data\n    raise ValueError(f\"No column mapping found for test case {test_case_number}.\")\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"49cccad1d1e6cb31","name":"test_exportfile_download Error Screenshot","source":"49cccad1d1e6cb31.png","type":"image/png","size":92073},{"uid":"85b4f2cbf2e5fcf1","name":"stdout","source":"85b4f2cbf2e5fcf1.txt","type":"text/plain","size":81}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"page::0","time":{"start":1746647091571,"stop":1746647091813,"duration":242},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"suite","value":"Address Details Test Suite"},{"name":"tag","value":"flaky(reruns=1, reruns_delay=1)"},{"name":"subSuite","value":"TestAddressDetails"},{"name":"host","value":"INBLR2791"},{"name":"thread","value":"21632-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"excel_value"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["flaky(reruns=1, reruns_delay=1)"]},"source":"93cdc9e746753662.json","parameterValues":[]}