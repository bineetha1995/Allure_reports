{"uid":"6ddc644aab954e79","name":"User can enter address manually and hit Qualify","fullName":"excel_value.TestAddressSearch#test_address_entry","historyId":"5410b56090b31436b383ada087c00c80","time":{"start":1746646823105,"stop":1746646868898,"duration":45793},"status":"failed","statusMessage":"Failed: Test failed: test_address_entry - Address qualification failed\nassert False\n +  where False = is_visible()\n +    where is_visible = <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'>.is_visible\n +      where <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'> = get_by_text('Expires on')\n +        where get_by_text = <Page url='https://qq.att.com/landing'>.get_by_text","statusTrace":"self = <excel_value.TestAddressSearch object at 0x000001D59D02E790>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can enter address manually and hit Qualify\")\n    def test_address_entry(self, page):\n        try:\n    \n            test_case_number = 4  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n    \n            with allure.step(\"Navigating to address entry page\"):\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            with allure.step(\"Filling address details\"):\n                page.get_by_role(\"button\", name=\"Or enter manually\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"manualFormStreetInput\").fill(address_data[\"STREET\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormCityInput\").fill(address_data[\"CITY\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"formDropdown\").get_by_label(\"State\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_text(address_data[\"STATE\"]).click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormZipInput\").fill(address_data[\"ZIP_CODE\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"qualifyButton\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n    \n            with allure.step(\"Validating manual address submission\"):\n                time.sleep(40)\n                print(f\"manual address submission, {page.get_by_text('Expires on').is_visible()} \")\n>               assert page.get_by_text(\"Expires on\").is_visible(), \"Address qualification failed\"\nE               AssertionError: Address qualification failed\nE               assert False\nE                +  where False = is_visible()\nE                +    where is_visible = <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'>.is_visible\nE                +      where <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'> = get_by_text('Expires on')\nE                +        where get_by_text = <Page url='https://qq.att.com/landing'>.get_by_text\n\nexcel_value.py:238: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <excel_value.TestAddressSearch object at 0x000001D59D02E790>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can enter address manually and hit Qualify\")\n    def test_address_entry(self, page):\n        try:\n    \n            test_case_number = 4  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n    \n            with allure.step(\"Navigating to address entry page\"):\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            with allure.step(\"Filling address details\"):\n                page.get_by_role(\"button\", name=\"Or enter manually\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"manualFormStreetInput\").fill(address_data[\"STREET\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormCityInput\").fill(address_data[\"CITY\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"formDropdown\").get_by_label(\"State\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_text(address_data[\"STATE\"]).click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormZipInput\").fill(address_data[\"ZIP_CODE\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"qualifyButton\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n    \n            with allure.step(\"Validating manual address submission\"):\n                time.sleep(40)\n                print(f\"manual address submission, {page.get_by_text('Expires on').is_visible()} \")\n                assert page.get_by_text(\"Expires on\").is_visible(), \"Address qualification failed\"\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n    \n        except Exception as e:\n>           handle_error(page, \"test_address_entry\", e)\n\nexcel_value.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://qq.att.com/landing'>, test_name = 'test_address_entry'\nerror = AssertionError('Address qualification failed\\nassert False\\n +  where False = is_visible()\\n +    where is_visible = <...'> = get_by_text(\\'Expires on\\')\\n +        where get_by_text = <Page url=\\'https://qq.att.com/landing\\'>.get_by_text')\n\n    def handle_error(page, test_name, error):\n        \"\"\"Handles errors by taking a screenshot, attaching it to Allure, and marking the test as failed.\"\"\"\n        os.makedirs(\"screenshots\", exist_ok=True)  # Ensure the screenshots directory exists\n        screenshot_path = f\"screenshots/{test_name}_error.png\"\n        page.screenshot(path=screenshot_path)\n        allure.attach.file(\n            screenshot_path,\n            name=f\"{test_name} Error Screenshot\",\n            attachment_type=allure.attachment_type.PNG\n        )\n        print(f\"Error during {test_name}: {error}\")\n>       pytest.fail(f\"Test failed: {test_name} - {error}\")\nE       Failed: Test failed: test_address_entry - Address qualification failed\nE       assert False\nE        +  where False = is_visible()\nE        +    where is_visible = <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'>.is_visible\nE        +      where <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'> = get_by_text('Expires on')\nE        +        where get_by_text = <Page url='https://qq.att.com/landing'>.get_by_text\n\nexcel_value.py:60: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"page","time":{"start":1746646754000,"stop":1746646755023,"duration":1023},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_url","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"pytestconfig","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"_verify_url","time":{"start":1746646754000,"stop":1746646754000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"Failed: Test failed: test_address_entry - Address qualification failed\nassert False\n +  where False = is_visible()\n +    where is_visible = <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'>.is_visible\n +      where <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'> = get_by_text('Expires on')\n +        where get_by_text = <Page url='https://qq.att.com/landing'>.get_by_text","statusTrace":"self = <excel_value.TestAddressSearch object at 0x000001D59D02E790>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can enter address manually and hit Qualify\")\n    def test_address_entry(self, page):\n        try:\n    \n            test_case_number = 4  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n    \n            with allure.step(\"Navigating to address entry page\"):\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            with allure.step(\"Filling address details\"):\n                page.get_by_role(\"button\", name=\"Or enter manually\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"manualFormStreetInput\").fill(address_data[\"STREET\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormCityInput\").fill(address_data[\"CITY\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"formDropdown\").get_by_label(\"State\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_text(address_data[\"STATE\"]).click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormZipInput\").fill(address_data[\"ZIP_CODE\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"qualifyButton\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n    \n            with allure.step(\"Validating manual address submission\"):\n                time.sleep(40)\n                print(f\"manual address submission, {page.get_by_text('Expires on').is_visible()} \")\n>               assert page.get_by_text(\"Expires on\").is_visible(), \"Address qualification failed\"\nE               AssertionError: Address qualification failed\nE               assert False\nE                +  where False = is_visible()\nE                +    where is_visible = <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'>.is_visible\nE                +      where <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'> = get_by_text('Expires on')\nE                +        where get_by_text = <Page url='https://qq.att.com/landing'>.get_by_text\n\nexcel_value.py:238: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <excel_value.TestAddressSearch object at 0x000001D59D02E790>, page = <Page url='https://qq.att.com/landing'>\n\n    @pytest.mark.flaky(reruns=1, reruns_delay=1)\n    @allure.title(\"User can enter address manually and hit Qualify\")\n    def test_address_entry(self, page):\n        try:\n    \n            test_case_number = 4  # Update test case number as needed\n    \n            with allure.step(f\"Fetching data for Test Case {test_case_number}\"):\n                address_data = read_address_data(test_case_number)\n    \n            with allure.step(\"Navigating to address entry page\"):\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_role(\"button\", name=\"att-logo-icon\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n    \n            with allure.step(\"Filling address details\"):\n                page.get_by_role(\"button\", name=\"Or enter manually\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"manualFormStreetInput\").fill(address_data[\"STREET\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormCityInput\").fill(address_data[\"CITY\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"formDropdown\").get_by_label(\"State\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_text(address_data[\"STATE\"]).click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                page.get_by_test_id(\"manualFormZipInput\").fill(address_data[\"ZIP_CODE\"])\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n                scroll_down(page)\n                page.get_by_test_id(\"qualifyButton\").click()\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n    \n            with allure.step(\"Validating manual address submission\"):\n                time.sleep(40)\n                print(f\"manual address submission, {page.get_by_text('Expires on').is_visible()} \")\n                assert page.get_by_text(\"Expires on\").is_visible(), \"Address qualification failed\"\n                page.wait_for_load_state(\"networkidle\")  # Waits until the DOM is fully loaded\n    \n        except Exception as e:\n>           handle_error(page, \"test_address_entry\", e)\n\nexcel_value.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://qq.att.com/landing'>, test_name = 'test_address_entry'\nerror = AssertionError('Address qualification failed\\nassert False\\n +  where False = is_visible()\\n +    where is_visible = <...'> = get_by_text(\\'Expires on\\')\\n +        where get_by_text = <Page url=\\'https://qq.att.com/landing\\'>.get_by_text')\n\n    def handle_error(page, test_name, error):\n        \"\"\"Handles errors by taking a screenshot, attaching it to Allure, and marking the test as failed.\"\"\"\n        os.makedirs(\"screenshots\", exist_ok=True)  # Ensure the screenshots directory exists\n        screenshot_path = f\"screenshots/{test_name}_error.png\"\n        page.screenshot(path=screenshot_path)\n        allure.attach.file(\n            screenshot_path,\n            name=f\"{test_name} Error Screenshot\",\n            attachment_type=allure.attachment_type.PNG\n        )\n        print(f\"Error during {test_name}: {error}\")\n>       pytest.fail(f\"Test failed: {test_name} - {error}\")\nE       Failed: Test failed: test_address_entry - Address qualification failed\nE       assert False\nE        +  where False = is_visible()\nE        +    where is_visible = <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'>.is_visible\nE        +      where <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'> = get_by_text('Expires on')\nE        +        where get_by_text = <Page url='https://qq.att.com/landing'>.get_by_text\n\nexcel_value.py:60: Failed","steps":[{"name":"Fetching data for Test Case 4","time":{"start":1746646823105,"stop":1746646823123,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Navigating to address entry page","time":{"start":1746646823123,"stop":1746646827570,"duration":4447},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Filling address details","time":{"start":1746646827570,"stop":1746646828701,"duration":1131},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"Validating manual address submission","time":{"start":1746646828701,"stop":1746646868742,"duration":40041},"status":"failed","statusMessage":"AssertionError: Address qualification failed\nassert False\n +  where False = is_visible()\n +    where is_visible = <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'>.is_visible\n +      where <Locator frame=<Frame name= url='https://qq.att.com/landing'> selector='internal:text=\"Expires on\"i'> = get_by_text('Expires on')\n +        where get_by_text = <Page url='https://qq.att.com/landing'>.get_by_text\n","statusTrace":"  File \"C:\\Users\\bv9653\\my-automation-project\\tests\\excel_value.py\", line 238, in test_address_entry\n    assert page.get_by_text(\"Expires on\").is_visible(), \"Address qualification failed\"\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"51181e989d0edd3c","name":"test_address_entry Error Screenshot","source":"51181e989d0edd3c.png","type":"image/png","size":36814},{"uid":"2e3fe8a539d1837e","name":"stdout","source":"2e3fe8a539d1837e.txt","type":"text/plain","size":504}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":4,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"page::0","time":{"start":1746647091571,"stop":1746647091813,"duration":242},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"suite","value":"Address Search Test Suite"},{"name":"tag","value":"flaky(reruns=1, reruns_delay=1)"},{"name":"subSuite","value":"TestAddressSearch"},{"name":"host","value":"INBLR2791"},{"name":"thread","value":"21632-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"excel_value"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":["flaky(reruns=1, reruns_delay=1)"]},"source":"6ddc644aab954e79.json","parameterValues":[]}